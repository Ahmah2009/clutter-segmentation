.TH CLUTTER-SEGMENTATION "JUNE 2011" 
.SH NAME

clutter-segmentation - a ROS package for recognizing objects in cluttered scenes


.SH Installation

The clutseg package is built on top of ROS packages tod_training and
tod_detecting in the object_recognition stack. It has been developed and
tested on ROS Diamondback running on a Ubuntu 10.10 Maverick Meerkat. You can
follow this recipe to get it running. It admittably requires a couple of
really nasty workarounds.

    1. Create an installation directory and open it in a terminal 

This directory is called CLUTSEG_PATH and will later contain the clutseg
repository and the required ROS overlays.

    2. git clone indefero@code.in.tum.de:clutter-segmentation.git

Your CLUTSEG_PATH directory should now contain the repository
clutter-segmentation.

    3. sudo easy_install rosinstall

If you don't have python-setuptools installed, you can also get the tool
directly from http://pypi.python.org/pypi/rosinstall

    4. rosinstall . clutter-segmentation/clutter-segmentation.rosinstall

This will setup dependencies and ROS overlays. Hit 's' for skip when being asked
for what action to take on repository clutter-segmentation. Including it in the
clutter-segmentation.rosinstall file will make sure that clutseg is included in
the ROS environment configured via setup.bash.

    5. source setup.bash

Depending on your needs, you might add this to your ~/.bashrc file.

    6. rosdep install clutseg

    7. export CLUTSEG_PATH=$(pwd)

This environment variable is used by ROS package clutseg in various occasions
It is recommended to add this to your ~./.bashrc file. Note that environment
variables defined in ~/.bashrc are usually not read in non-interactive session,
such as cron. Most of the scripts in clutseg that require CLUTSEG_PATH will
therefore read ~/.env (non-standard) before executing.

    8. export PATH=$CLUTSEG_PATH/clutter-segmentation/scripts/script-bin:$PATH

    9. mods-link

Apply patches on tod_training, tod_detecting, rbrief, fiducial and some other
places where serious bugs were blocking progress or blackbox behaviour was
blocking the gain of valuable information.

   10. rosmake --rosdep-install clutseg

   11. Install RSQlite

You can get it from http://cran.r-project.org/web/packages/RSQLite, as this R
package is not prepackaged for Ubuntu Meerkat. Follow the installation
instructions on the website.


.SH Running tests

Since clutter-segmentation has been developed against unstable and not exactly
bug-free packages, there are quite a bunch of tests available that test for
functionality and regression in package clutseg and its not-exactly reliable
dependencies. Some of these tests require Gigabytes of test data that have not
been included in the repository. Some smaller test data has been included, and
other tests do not require any test data to run. You can compile the tests 
(standard for ROS packages) via

    make tests

and run them by calling

    make test

You can also run single tests via

   bin/utest --gtest_filter=ParamSelTest.*

or another example

   bin/utest --gtest_filter=ConnCompTest.FillSmallConnectedComponents

for running only a specific test.


.SH Learning Models from TOD raw data 

TOD comes with some example raw data that can be used for populating a modelbase.
There are also test images available. The general approach to generate a modelbase
and use it for recognition is described in two tutorials:

    http://www.ros.org/wiki/tod_training/Tutorials
    http://www.ros.org/wiki/tod_detecting/Tutorials.


The tutorial http://www.ros.org/wiki/tod_training/Tutorials/BaseCreation
explains how to create a training base. According to this tutorial, the
training objects are assumed to have a fiducial marker rigidly attached to
them.  This might create problems when we try to use existing databases with
images that actually do not contain any fiducial marker. The tutorial also
expects ROS bags that contain synchronized messages of certain types.
Unfortunately, it seems that it's only the topic names listed but not the data
types. Inspecting the sample data using rosbag info show the different kinds of
data that might have to be included in training data:

camera_info   sensor_msgs/CameraInfo 
image         sensor_msgs/Image      
image_mono    sensor_msgs/Image      
points2       sensor_msgs/PointCloud2
tf            tf/tfMessage 


There are some ROS bags available that can be used for training purposes.

    $ wget http://vault.willowgarage.com/wgdata1/vol1/tod_kinect_bags/training/fat_free_milk.bag
    $ wget http://vault.willowgarage.com/wgdata1/vol1/tod_kinect_bags/training/fat_free_milk.tf.bag
    $ ...
    
Get some configuration data for training, edit config.txt to specify all available bags.

    $ wget http://vault.willowgarage.com/wgdata1/vol1/tod_kinect_bags/training/fiducial.yml
    $ wget http://vault.willowgarage.com/wgdata1/vol1/tod_kinect_bags/training/config.yaml
    $ wget http://vault.willowgarage.com/wgdata1/vol1/tod_kinect_bags/training/config.txt
    $ wget http://vault.willowgarage.com/wgdata1/vol1/tod_kinect_bags/training/features.config.yaml
    $ wget http://vault.willowgarage.com/wgdata1/vol1/tod_kinect_bags/training/README

Extract the bag file using 

    $ rosrun tod_training dump_all.py bags base

and generate the training data base using
  
    # these two configuration files are required for training 
    $ cp bags/fiducial.yml base/
    $ cp bags/config.yaml base/
    $ cp bags/features.config.yaml base/
    $ cd base
    $ rosrun tod_training train_all.sh
    $ cp bags/config.txt base/config.txt

The tutorial describing how to generate bags for training is just an empty
stub.

